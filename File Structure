# **Leonord-Scanner-Terminal**  

**Accuracy, clarity, and valuable insights for traders and developers.**  

## **Overview**  

Leonord Scanner Terminal is a powerful command-line tool designed to analyze tokens on the **Solana blockchain**. It connects directly to the blockchain using the **Solana SDK (@solana/web3.js)**, providing **real-time, detailed insights** on token information, associated accounts, and balances.

## **Features**  

âœ… **Direct Blockchain Access** â€“ Connects directly to Solana via the SDK, bypassing intermediaries.  
âœ… **Comprehensive Token Insights** â€“ Retrieve token **name, symbol, total supply, and decimals**.  
âœ… **Associated Account Details** â€“ Fetch token holders and account balances.  
âœ… **Fast & Reliable** â€“ Optimized for traders, developers, and crypto enthusiasts.  
âœ… **Easy Integration** â€“ Simple **JavaScript functions** for fetching Solana token details.

## **Technology Stack**  

- **Language**: JavaScript  
- **Blockchain**: Solana  
- **Library**: `@solana/web3.js`  
- **Runtime**: Node.js  

## **Installation**  

1. Clone this repository:  
   ```bash
   git clone https://github.com/yourusername/Leonord-Scanner-Terminal.git
   cd Leonord-Scanner-Terminal
   ```
2. Install dependencies:  
   ```bash
   npm install
   ```
3. Run the scanner:  
   ```bash
   node scanner.js
   ```

## **Usage**  

### **1. Fetch Token Details**
```javascript
import { getTokenDetails } from "./blockchainUtils.js";

const tokenAddress = "YourTokenAddressHere"; // Replace with a real token address

getTokenDetails(tokenAddress)
  .then((details) => console.log(details))
  .catch((error) => console.error(error));
```
ðŸ“Œ **Retrieves:**  
- Token Name  
- Symbol  
- Decimals  
- Total Supply  

### **2. Fetch Associated Accounts**  
```javascript
import { getAssociatedAccounts } from "./blockchainUtils.js";

const tokenAddress = "YourTokenAddressHere";

getAssociatedAccounts(tokenAddress)
  .then((accounts) => console.log(accounts))
  .catch((error) => console.error(error));
```
ðŸ“Œ **Retrieves:**  
- Account Addresses Holding the Token  
- Account Balances  

### **3. Full Token Analysis**  
```javascript
import { analyzeToken } from "./scanner.js";

const tokenAddress = "YourTokenAddressHere";

analyzeToken(tokenAddress);
```
ðŸ“Œ **Logs:**  
- Token Details  
- Associated Accounts & Balances  

## **Example Output**  
```bash
Token Details:
Name: ExampleToken
Symbol: EXMPL
Decimals: 6
Total Supply: 1,000,000

Associated Accounts:
1. Address: ABC123...XYZ, Balance: 500
2. Address: DEF456...XYZ, Balance: 250
```

## **Error Handling**  
The scanner includes robust error handling for:  
- Invalid token addresses  
- Network issues  
- Missing token data  

Example error output:  
```bash
Error fetching token data: Token data not found for this address.
```

## **File Structure (Detailed Explanation)**  

A well-structured repository improves **maintainability, scalability, and collaboration**. Below is the **complete directory structure** for the **Leonord Scanner Terminal**.

### **Project Directory Tree**  

```plaintext
Leonord-Scanner-Terminal/
â”‚â”€â”€ src/                     
â”‚   â”œâ”€â”€ scanner.js           # Main token scanner logic
â”‚   â”œâ”€â”€ blockchainUtils.js   # Blockchain interaction utilities
â”‚   â”œâ”€â”€ config.js            # Configuration settings (RPC URLs, constants)
â”‚â”€â”€ docs/                    
â”‚   â”œâ”€â”€ API.md               # API reference documentation
â”‚   â”œâ”€â”€ CONTRIBUTING.md      # Contribution guidelines
â”‚   â”œâ”€â”€ USAGE.md             # How to use the scanner
â”‚   â”œâ”€â”€ FAQ.md               # Frequently Asked Questions
â”‚â”€â”€ tests/                   
â”‚   â”œâ”€â”€ scanner.test.js      # Jest test cases for scanner functions
â”‚   â”œâ”€â”€ blockchainUtils.test.js # Tests for blockchain utility functions
â”‚â”€â”€ .github/                 
â”‚   â”œâ”€â”€ workflows/           
â”‚   â”‚   â”œâ”€â”€ test.yml         # GitHub Actions for CI/CD
â”‚â”€â”€ public/                  
â”‚   â”œâ”€â”€ images/              # Screenshots, diagrams
â”‚   â”œâ”€â”€ logo.png             # Project logo
â”‚â”€â”€ .gitignore               # Ignored files (node_modules, environment files)
â”‚â”€â”€ LICENSE                  # Open-source license (MIT)
â”‚â”€â”€ README.md                # Project overview and setup
â”‚â”€â”€ package.json             # Project metadata, dependencies, scripts
â”‚â”€â”€ package-lock.json        # Lockfile for dependencies
```

## **Contributing**  
Contributions are welcome! Feel free to fork the repo and submit a pull request.

## **License**  
ðŸ“œ MIT License â€“ Free to use and modify.

